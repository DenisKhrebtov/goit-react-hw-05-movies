{"version":3,"file":"static/js/387.b8c7218d.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,GAAAA,IAAA,qCAAwCC,IAF5D,cAEGE,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gGAEoBT,EAAAA,GAAAA,IAAA,+BACGC,EADH,iCACmCQ,EADnC,gCAFpB,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,oBACMV,EADN,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA2BD,GAA3B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACcV,EADd,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,MAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACcV,EADd,2BAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gF,6JC7CMQ,EAAOC,EAAAA,GAAAA,GAAH,iLAQJC,EAAWD,EAAAA,GAAAA,GAAH,kGAORE,EAASF,EAAAA,GAAAA,IAAH,0D,SCqCnB,EA1Ca,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOd,EAAP,KAAciB,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbd,EAAAA,EAAAA,IAAYO,GAASS,MAAK,SAAAxB,GACxB,IAAKA,EAAKyB,OAGR,OAFAL,GAAS,QACTE,GAAa,GAGfH,EAAUnB,GACVoB,GAAS,GACTE,GAAa,EACd,GACF,GAAE,CAACP,KAGF,2BACGM,IAAa,SAACK,EAAA,EAAD,IACbvB,IAAS,4DACC,IAAVA,IACC,SAACQ,EAAD,UACGO,EAAOS,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACV,UAACjB,EAAD,YACE,SAACC,EAAD,CACEiB,IAAKF,EAAeG,EAAAA,EAAMH,EAAeI,EACzCC,IAAKN,KAEP,uBAAIA,KACJ,wCAAgBE,OANHF,EADL,QAcrB,C,sDCpDM,IAAMI,EAAM,iC","sources":["api/api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","constanсe/imageUrl.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '572822f6c91e4ecf30bc82c47474f59a';\n\nexport async function fetchTrendFilms() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchFilmsByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmInfo(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmCast(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmReviews(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 30px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 10px;\n  margin: 10px auto;\n`;\n\nexport const ListItem = styled.li`\n  list-style: none;\n  &:not(:last-child) {\n    margin-right: 5px;\n  }\n`;\n\nexport const Avatar = styled.img`\n  width: 100%;\n  height: 300px;\n`;\n","import { Loader } from 'components/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getFilmCast } from '../../api/api';\n\nimport { URL } from '../../constanсe/imageUrl';\n\nimport noPhoto from '../../img/noimage.webp';\n\nimport { List, ListItem, Avatar } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getFilmCast(movieId).then(data => {\n      if (!data.length) {\n        setError(true);\n        setIsLoading(false);\n        return;\n      }\n      setActors(data);\n      setError(false);\n      setIsLoading(false);\n    });\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>Sorry no information about cast</p>}\n      {error === false && (\n        <List>\n          {actors.map(({ name, profile_path, character }) => (\n            <ListItem key={name}>\n              <Avatar\n                src={profile_path ? URL + profile_path : noPhoto}\n                alt={name}\n              />\n              <p>{name}</p>\n              <p>Characters: {character}</p>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","export const URL = 'https://image.tmdb.org/t/p/w500';\n"],"names":["axios","API_KEY","fetchTrendFilms","response","data","results","console","error","fetchFilmsByName","query","getFilmInfo","filmId","getFilmCast","cast","getFilmReviews","List","styled","ListItem","Avatar","movieId","useParams","useState","actors","setActors","setError","isLoading","setIsLoading","useEffect","then","length","Loader","map","name","profile_path","character","src","URL","noPhoto","alt"],"sourceRoot":""}