{"version":3,"file":"static/js/779.3e9f0f62.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,GAAAA,IAAA,qCAAwCC,IAF5D,cAEGE,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gGAEoBT,EAAAA,GAAAA,IAAA,+BACGC,EADH,iCACmCQ,EADnC,gCAFpB,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,oBACMV,EADN,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA2BD,GAA3B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACcV,EADd,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,MAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACcV,EADd,2BAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gF,8IC7CMQ,EAAOC,EAAAA,GAAAA,GAAH,gIAQJC,EAAWD,EAAAA,GAAAA,GAAH,+KAURE,EAASF,EAAAA,GAAAA,EAAH,wFAMNG,EAAUH,EAAAA,GAAAA,EAAH,uF,SCqBpB,EAvCgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOf,EAAP,KAAckB,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbb,EAAAA,EAAAA,IAAeM,GAASS,MAAK,SAAAzB,GAC3B,IAAKA,EAAK0B,OAGR,OAFAL,GAAS,QACTE,GAAa,GAGfH,EAAWpB,GAEXqB,GAAS,GACTE,GAAa,EACd,GACF,GAAE,CAACP,KAGF,2BACGM,IAAa,SAACK,EAAA,EAAD,IACbxB,IAAS,oEACC,IAAVA,IACC,SAACQ,EAAD,UACGQ,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACX,UAACjB,EAAD,YACE,UAACC,EAAD,sBAAiBe,MACjB,SAACd,EAAD,UAAUe,MAFGD,EADJ,QAUtB,C","sources":["api/api.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '572822f6c91e4ecf30bc82c47474f59a';\n\nexport async function fetchTrendFilms() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchFilmsByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmInfo(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmCast(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmReviews(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 98vw;\n  margin: 10px auto;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li`\n  background-color: #cceaea;\n  border: 1px solid grey;\n  border-radius: 4px;\n  padding: 5px;\n  &:not(:last-child) {\n    margin-bottom: 3px;\n  }\n`;\n\nexport const Author = styled.p`\n  font-size: 16px;\n  font-weight: 700;\n  margin-bottom: 3px;\n`;\n\nexport const Content = styled.p`\n  font-size: 14px;\n  font-weight: 400;\n  padding-left: 5px;\n`;\n","import { Loader } from 'components/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getFilmReviews } from '../../api/api';\n\nimport { List, ListItem, Author, Content } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getFilmReviews(movieId).then(data => {\n      if (!data.length) {\n        setError(true);\n        setIsLoading(false);\n        return;\n      }\n      setReviews(data);\n\n      setError(false);\n      setIsLoading(false);\n    });\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>We dont have any reviews for this movie</p>}\n      {error === false && (\n        <List>\n          {reviews.map(({ author, content }) => (\n            <ListItem key={author}>\n              <Author>Author: {author}</Author>\n              <Content>{content}</Content>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","API_KEY","fetchTrendFilms","response","data","results","console","error","fetchFilmsByName","query","getFilmInfo","filmId","getFilmCast","cast","getFilmReviews","List","styled","ListItem","Author","Content","movieId","useParams","useState","reviews","setReviews","setError","isLoading","setIsLoading","useEffect","then","length","Loader","map","author","content"],"sourceRoot":""}