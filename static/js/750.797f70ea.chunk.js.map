{"version":3,"file":"static/js/750.797f70ea.chunk.js","mappings":"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","sources":["api/api.js","components/Form/Form.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '572822f6c91e4ecf30bc82c47474f59a';\n\nexport async function fetchTrendFilms() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchFilmsByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmInfo(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmCast(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmReviews(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Form = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n  const handleChange = event => {\n    const value = event.target.value.toLowerCase().trim();\n    setQuery(value);\n  };\n\n  const reset = () => {\n    setQuery('');\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!query) {\n      return;\n    }\n    onSubmit(query);\n    reset();\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        autoFocus\n        autoComplete=\"off\"\n        name=\"search\"\n        value={query}\n        onChange={handleChange}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MainBox = styled.div`\n  text-decoration: none;\n`;\n\nexport const List = styled.ul`\n  list-style-type: none;\n  display: block;\n`;\n\nexport const Item = styled.li`\n  text-decoration: none;\n`;\n\nexport const LinkFilms = styled(Link)`\n  display: flex;\n  align-items: center;\n  width: 100wh;\n  padding: 1px 8px;\n  color: black;\n  text-decoration: none;\n  border-radius: 8px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  font-weight: 400;\n  &:hover {\n    background-color: #ffcbcb;\n  }\n  &.active {\n    font-weight: 700;\n    background-color: #ffcbcb;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { Form } from 'components/Form/Form';\nimport { useSearchParams, useLocation } from 'react-router-dom';\n\nimport { fetchFilmsByName } from '../../api/api';\nimport { Loader } from 'components/Loader';\n\nimport { MainBox, List, Item, LinkFilms } from './Movies.styled';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParam, setSearchParam] = useSearchParams();\n\n  const location = useLocation();\n  const currentPath = location.pathname === '/' ? 'movies/' : '';\n\n  const search = searchParam.get('q') ?? '';\n\n  const onSubmit = newQuery => {\n    if (query === newQuery) {\n      return alert('You already have it');\n    }\n    setQuery(newQuery);\n    setSearchParam(newQuery !== '' ? { q: newQuery } : {});\n  };\n\n  const createFilmList = async query => {\n    try {\n      setFilms([]);\n      setIsLoading(true);\n      const data = await fetchFilmsByName(query);\n      if (!data.length) {\n        setError(true);\n        return;\n      }\n      setFilms(data);\n      setError(false);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (search) {\n      setQuery(search);\n    }\n    if (!query) {\n      return;\n    }\n    createFilmList(query);\n    // eslint-disable-next-line\n  }, [query]);\n\n  return (\n    <MainBox>\n      <Form onSubmit={onSubmit} />\n      {isLoading && <Loader />}\n      <div>\n        {error === true ? (\n          <p>No results</p>\n        ) : (\n          <List>\n            {films.map(film => (\n              <Item key={film.id}>\n                <LinkFilms\n                  to={`${currentPath}${film.id}`}\n                  state={{ from: location }}\n                >\n                  <p>{film.title}</p>\n                </LinkFilms>\n              </Item>\n            ))}\n          </List>\n        )}\n      </div>\n    </MainBox>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","API_KEY","fetchTrendFilms","response","data","results","console","error","fetchFilmsByName","query","getFilmInfo","filmId","getFilmCast","cast","getFilmReviews","Form","onSubmit","useState","setQuery","event","preventDefault","type","autoFocus","autoComplete","name","value","onChange","target","toLowerCase","trim","MainBox","styled","List","Item","LinkFilms","Link","films","setFilms","setError","isLoading","setIsLoading","useSearchParams","searchParam","setSearchParam","location","useLocation","currentPath","pathname","search","get","createFilmList","length","useEffect","newQuery","alert","q","Loader","map","film","to","id","state","from","title"],"sourceRoot":""}