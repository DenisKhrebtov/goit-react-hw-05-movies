{"version":3,"file":"static/js/841.04f1b2b1.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,GAAAA,IAAA,qCAAwCC,IAF5D,cAEGE,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gGAEoBT,EAAAA,GAAAA,IAAA,+BACGC,EADH,iCACmCQ,EADnC,gCAFpB,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,oBACMV,EADN,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA2BD,GAA3B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACcV,EADd,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,MAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACcV,EADd,2BAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gF,sDC/CA,IAAMQ,EAAM,iC,iHCiEnB,UAvDsB,WAAO,IAAD,IAC1B,GAAgCC,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,GAAQC,EAAAA,EAAAA,MAERC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,YAQ7C,IANAC,EAAAA,EAAAA,YAAU,YACRf,EAAAA,EAAAA,IAAYS,EAAMO,SAASC,MAAK,SAAAvB,GAC9Bc,EAAYd,EACb,GACF,GAAE,CAACe,EAAMO,UAELT,EAAL,CAGA,IAAMW,EAAO,IAAIC,KAAKZ,EAASa,cAAcC,cAC7C,OACE,4BACE,SAAC,KAAD,CAAMC,GAAIX,EAAV,sBAEE,gBACEY,IAAKhB,EAASiB,YAAcnB,EAAAA,EAAME,EAASiB,YAAcC,EACzDC,IAAKnB,EAASoB,SAGlB,oCAAQpB,EAASoB,MAAjB,aAA2BT,EAA3B,aACA,wCAAiBX,EAASqB,aAAe,GAAM,IAA/C,SACA,sCACA,uBAAIrB,EAASsB,YACb,oCACA,uBACGtB,EAASuB,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OACnB,gCAAiBD,IAANC,EADQ,OAIvB,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMX,GAAG,OAAOT,MAAO,CAAEC,KAAMH,GAA/B,mBADM,SAKR,yBACE,SAAC,KAAD,CAAMW,GAAG,UAAUT,MAAO,CAAEC,KAAMH,GAAlC,sBADM,eAMV,SAAC,EAAAuB,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,QAnCL,CAuCF,C","sources":["api/api.js","constanse/imageUrl.js","pages/MoviesDetails/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '572822f6c91e4ecf30bc82c47474f59a';\n\nexport async function fetchTrendFilms() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchFilmsByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmInfo(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmCast(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmReviews(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","export const URL = 'https://image.tmdb.org/t/p/w500';\n","import { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { getFilmInfo } from '../../api/api';\n\nimport { Loader } from 'components/Loader';\n\nimport { URL } from '../../constanse/imageUrl';\n\nimport noPhoto from '../../img/noimage.webp';\n\nconst MoviesDetails = () => {\n  const [filmInfo, setFilmInfo] = useState(null);\n  const param = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/products';\n\n  useEffect(() => {\n    getFilmInfo(param.movieId).then(data => {\n      setFilmInfo(data);\n    });\n  }, [param.movieId]);\n\n  if (!filmInfo) {\n    return;\n  }\n  const date = new Date(filmInfo.release_date).getFullYear();\n  return (\n    <div>\n      <Link to={backLinkHref}>Go back</Link>\n      {\n        <img\n          src={filmInfo.poster_path ? URL + filmInfo.poster_path : noPhoto}\n          alt={filmInfo.title}\n        />\n      }\n      <h2>{`${filmInfo.title} (${date})`} </h2>\n      <p>User Score: {(filmInfo.vote_average / 10) * 100} %</p>\n      <h3>Overview</h3>\n      <p>{filmInfo.overview}</p>\n      <h3>Genres</h3>\n      <p>\n        {filmInfo.genres.map(({ name, id }) => (\n          <span key={id}> {name}</span>\n        ))}\n      </p>\n      <h3>Additional information</h3>\n      <ul>\n        <li key=\"cast\">\n          <Link to=\"cast\" state={{ from: backLinkHref }}>\n            Cast\n          </Link>\n        </li>\n        <li key=\"reviews\">\n          <Link to=\"reviews\" state={{ from: backLinkHref }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["axios","API_KEY","fetchTrendFilms","response","data","results","console","error","fetchFilmsByName","query","getFilmInfo","filmId","getFilmCast","cast","getFilmReviews","URL","useState","filmInfo","setFilmInfo","param","useParams","backLinkHref","useLocation","state","from","useEffect","movieId","then","date","Date","release_date","getFullYear","to","src","poster_path","noPhoto","alt","title","vote_average","overview","genres","map","name","id","Suspense","fallback"],"sourceRoot":""}